class LRU
{
    static int pageFaults(int pages[], int n, int capacity)
    {
        // Representa las páginas disponibles.
        HashSet<Integer> s = new HashSet<>(capacity);
       
        // Guarda los indices menos utilizados.
        HashMap<Integer, Integer> indexes = new HashMap<>();
       
        // Inicializa en la primera pagina.
        int page_faults = 0;
        for (int i=0; i<n; i++)
        {
			//Verifica si está a capacidad.
            if (pages.size() < capacity)
            {
				// Añade al set
                if (!pages.contains(pages[i]))
                {
                    pages.add(pages[i]);
					
					//Incrementa
                    page_faults++;
                }
       
                // Almacena el índice más utilizado de cada página. 
                indexes.put(pages[i], i);
            }
       
            // De estar lleno el caché, implementa LRU.
            else
            {
                //Verifica que la página actual no se encuentre en el set
                if (!pages.contains(pages[i]))
                {
                    // Búsqueda de la página menos usada en el set
                    int lru = Integer.MAX_VALUE, val=Integer.MIN_VALUE;
                      
                    Iterator<Integer> itr = pages.iterator();
                      
                    while (itr.hasNext()) {
                        int temp = itr.next();
                        if (indexes.get(temp) < lru)
                        {
                            lru = indexes.get(temp);
                            val = temp;
                        }
                    }
                  
                    s.remove(val);
					
                   indexes.remove(val);
                    
                    s.add(pages[i]);
       
                    page_faults++;
                }
       
                // Actualiza el índice de la página actual.
                indexes.put(pages[i], i);
            }
        }
       
        return page_faults;
    }	
}
